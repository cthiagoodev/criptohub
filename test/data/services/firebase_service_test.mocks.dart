// Mocks generated by Mockito 5.4.6 from annotations
// in criptohub/test/data/services/firebase_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:criptohub/data/adapters/firebase_core_adapter.dart' as _i3;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseOptions_1 extends _i1.SmartFake
    implements _i2.FirebaseOptions {
  _FakeFirebaseOptions_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FirebaseCoreAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseCoreAdapter extends _i1.Mock
    implements _i3.FirebaseCoreAdapter {
  @override
  _i4.Future<_i2.FirebaseApp> initializeApp({
    required _i2.FirebaseOptions? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#initializeApp, [], {#options: options}),
            returnValue: _i4.Future<_i2.FirebaseApp>.value(
              _FakeFirebaseApp_0(
                this,
                Invocation.method(#initializeApp, [], {#options: options}),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.FirebaseApp>.value(
              _FakeFirebaseApp_0(
                this,
                Invocation.method(#initializeApp, [], {#options: options}),
              ),
            ),
          )
          as _i4.Future<_i2.FirebaseApp>);

  @override
  _i2.FirebaseApp app([String? name]) =>
      (super.noSuchMethod(
            Invocation.method(#app, [name]),
            returnValue: _FakeFirebaseApp_0(
              this,
              Invocation.method(#app, [name]),
            ),
            returnValueForMissingStub: _FakeFirebaseApp_0(
              this,
              Invocation.method(#app, [name]),
            ),
          )
          as _i2.FirebaseApp);
}

/// A class which mocks [FirebaseApp].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseApp extends _i1.Mock implements _i2.FirebaseApp {
  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i5.dummyValue<String>(this, Invocation.getter(#name)),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  _i2.FirebaseOptions get options =>
      (super.noSuchMethod(
            Invocation.getter(#options),
            returnValue: _FakeFirebaseOptions_1(
              this,
              Invocation.getter(#options),
            ),
            returnValueForMissingStub: _FakeFirebaseOptions_1(
              this,
              Invocation.getter(#options),
            ),
          )
          as _i2.FirebaseOptions);

  @override
  bool get isAutomaticDataCollectionEnabled =>
      (super.noSuchMethod(
            Invocation.getter(#isAutomaticDataCollectionEnabled),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setAutomaticDataCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setAutomaticDataCollectionEnabled, [enabled]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setAutomaticResourceManagementEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setAutomaticResourceManagementEnabled, [
              enabled,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [FirebaseOptions].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockFirebaseOptions extends _i1.Mock implements _i2.FirebaseOptions {
  @override
  String get apiKey =>
      (super.noSuchMethod(
            Invocation.getter(#apiKey),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#apiKey),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#apiKey),
            ),
          )
          as String);

  @override
  String get appId =>
      (super.noSuchMethod(
            Invocation.getter(#appId),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#appId),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#appId),
            ),
          )
          as String);

  @override
  String get messagingSenderId =>
      (super.noSuchMethod(
            Invocation.getter(#messagingSenderId),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#messagingSenderId),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#messagingSenderId),
            ),
          )
          as String);

  @override
  String get projectId =>
      (super.noSuchMethod(
            Invocation.getter(#projectId),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#projectId),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#projectId),
            ),
          )
          as String);

  @override
  Map<String, String?> get asMap =>
      (super.noSuchMethod(
            Invocation.getter(#asMap),
            returnValue: <String, String?>{},
            returnValueForMissingStub: <String, String?>{},
          )
          as Map<String, String?>);

  @override
  _i2.FirebaseOptions copyWith({
    String? apiKey,
    String? appId,
    String? messagingSenderId,
    String? projectId,
    String? authDomain,
    String? databaseURL,
    String? storageBucket,
    String? measurementId,
    String? trackingId,
    String? deepLinkURLScheme,
    String? androidClientId,
    String? iosClientId,
    String? iosBundleId,
    String? appGroupId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #apiKey: apiKey,
              #appId: appId,
              #messagingSenderId: messagingSenderId,
              #projectId: projectId,
              #authDomain: authDomain,
              #databaseURL: databaseURL,
              #storageBucket: storageBucket,
              #measurementId: measurementId,
              #trackingId: trackingId,
              #deepLinkURLScheme: deepLinkURLScheme,
              #androidClientId: androidClientId,
              #iosClientId: iosClientId,
              #iosBundleId: iosBundleId,
              #appGroupId: appGroupId,
            }),
            returnValue: _FakeFirebaseOptions_1(
              this,
              Invocation.method(#copyWith, [], {
                #apiKey: apiKey,
                #appId: appId,
                #messagingSenderId: messagingSenderId,
                #projectId: projectId,
                #authDomain: authDomain,
                #databaseURL: databaseURL,
                #storageBucket: storageBucket,
                #measurementId: measurementId,
                #trackingId: trackingId,
                #deepLinkURLScheme: deepLinkURLScheme,
                #androidClientId: androidClientId,
                #iosClientId: iosClientId,
                #iosBundleId: iosBundleId,
                #appGroupId: appGroupId,
              }),
            ),
            returnValueForMissingStub: _FakeFirebaseOptions_1(
              this,
              Invocation.method(#copyWith, [], {
                #apiKey: apiKey,
                #appId: appId,
                #messagingSenderId: messagingSenderId,
                #projectId: projectId,
                #authDomain: authDomain,
                #databaseURL: databaseURL,
                #storageBucket: storageBucket,
                #measurementId: measurementId,
                #trackingId: trackingId,
                #deepLinkURLScheme: deepLinkURLScheme,
                #androidClientId: androidClientId,
                #iosClientId: iosClientId,
                #iosBundleId: iosBundleId,
                #appGroupId: appGroupId,
              }),
            ),
          )
          as _i2.FirebaseOptions);
}
